type Comment {
  id: ID!
  authorID: String!
  textID: String!
  content: String!
  timestamp: String!
}

input CommentInput {
  authorID: String!
  textID: String!
  content: String!
  timestamp: String!
}

type Text {
  id: ID!
  title: String!
  content: String!
  creator: String!
  collaborator: String
  jobTitle: String
  jobApplyUrl: String
  jobDesc: String
  company: String
}

input TextInput {
  title: String
  content: String
  creator: String!
  collaborator: String
  jobTitle: String
  jobApplyUrl: String
  jobDesc: String
  company: String
}

type User {
  email: String!
  firstName: String
  lastName: String
}

type Mutation {
  createText(text: TextInput!): Text
  deleteText(id: ID!): String!
  updateText(text: TextInput!, id: ID!): Text
  createComment(comment: CommentInput): Comment
  deleteComment(id: ID!): String!
  updateComment(comment: CommentInput!, id: ID!): Comment
}

type Query {
  listTexts: [Text]!
  listText(id: ID!): Text!
  listComments(textID: ID!): [Comment]
}
